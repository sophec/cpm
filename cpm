#!/bin/sh

phi() {
    >&2 printf "\033[33;1m-> \033[35;1m%s | %s\033[m %s\n" "$1" "$2" "$3"
}

usage() {
    >&2 echo "cpm [i|r|l|C|u|U|s|S|I|c|h] [pkg]..."
    phi i "install" "install one or more packages"
    phi r "remove " "remove one or more packages"
    phi l "list   " "list installed packages"
    phi C "count  " "count installed packages"
    phi u "update " "update package lists"
    phi U "upgrade" "upgrade all packages"
    phi s "search " "search for a package"
    phi S "show   " "show information about a package"
    phi I "info   " "same as show"
    phi c "clean  " "clean up leftover files/caches/orphans"
    phi h "help   " "show this message"
}

pem() {
    >&2 printf "\033[31;1merror:\033[m %s\n" "$1"
}

case "$1" in
    i|install)
        OP='install'
        if [ $# -lt 2 ]; then
            pem "$OP: no package(s) specified"
            exit 1
        fi
        ;;
    r|remove)
        OP='remove'
        if [ $# -lt 2 ]; then
            pem "$OP: no package(s) specified"
            exit 1
        fi
        ;;
    l|list)
        OP='list'
        ;;
    C|count)
        OP='count'
        ;;
    u|update)
        OP='update'
        ;;
    U|upgrade)
        OP='upgrade'
        ;;
    s|search)
        OP='search'
        if [ $# -lt 2 ]; then
            pem "$OP: please specify a package"
            exit 1
        elif [ $# -gt 2 ]; then
            pem "$OP: only one package may be queried at a time"
            exit 1
        fi
        ;;
    S|show|I|info)
        OP='show'
        if [ $# -lt 2 ]; then
            pem "$OP: please specify a package"
            exit 1
        elif [ $# -gt 2 ]; then
            pem "$OP: only one argument is allowed"
            exit 1
        fi
        ;;
    c|clean)
        OP='clean'
        ;;
    h|help)
        usage
        exit 0
        ;;
    "")
        usage
        exit 1
        ;;
    *)
        pem "Unrecognized operation: $1"
        exit 1
        ;;
esac
shift

# pipe to this to get a count instead of relying on wc -l
tot() {
    i=0
    while read -r line; do
        i=$((i + 1))
    done
    echo $i
}

# replacement for command -v which ignores aliases
# this is useful for me, don't ask why
has() {
    case "$(command -v $1 2>/dev/null)" in
        alias*|"") return 1
    esac
}

_apt() {
    case "$OP" in
        install) sudo apt install "$@";;
        remove) sudo apt remove "$@";;
        list) apt list --installed;;
        count) dpkg-query -f '.\n' -W | tot;;
        update) sudo apt update;;
        upgrade) sudo apt dist-upgrade;;
        search) apt search "$1";;
        show) apt show "$1";;
        clean) sudo apt autoremove;;
    esac
}

_dnf() {
    case "$OP" in
        install) sudo dnf install "$@";;
        remove) sudo dnf remove "$@";;
        list) dnf list --installed;;
        count) rpm -qa | tot;;
        update) sudo dnf check-update;;
        upgrade) sudo dnf distro-sync;;
        search) dnf search "$1";;
        show) dnf info "$1";;
        clean) sudo dnf autoremove;;
    esac
}

_nix() {
    case "$OP" in
        install) nix-env -iA "$@";;
        remove) niv-env -e "$@";;
        list) nix-env -q "$@";;
        count) nix-env -q | wc -l;;
        update) nix-channel --update;;
        upgrade) nix-env -u;;
        search) nix-env -qa "$@";;
        show) nix-env -qa --description "$@";;
        clean) nix-collect-garbage -d;;
    esac
}

_pacman() {
    case "$OP" in
        install) sudo pacman -S "$@";;
        remove) sudo pacman -Rs "$@";;
        list) pacman -Q;;
        count) pacman -Q | tot;;
        update) sudo pacman -Sy;;
        upgrade) sudo pacman -Syu;;
        search) pacman -Ss $1;;
        show) pacman -Si $1;;
        clean) sudo pacman -Rns $(pacman -Qtdq) && sudo pacman -Sc;;
    esac
}

_macports() {
    case "$OP" in
        install) sudo port install -c "$@";;
        remove) sudo port uninstall --follow-dependencies "$@";;
        list) port installed;;
        count) port installed | tot;;
        update) sudo port sync;;
        upgrade) sudo port selfupdate;;
        search) port search $1;;
        show) port info $1;;
        clean) sudo port reclaim;;
    esac
}

_xbps() {
    case "$OP" in
        install) sudo xbps-install "$@";;
        remove) sudo xbps-remove -R "$@";;
        list) xbps-query -l;;
        count) xbps-query -l | tot;;
        update) sudo xbps-install -S;;
        upgrade) sudo xbps-install -Su && sudo xbps-install -Su;;
        search) xbps-query -s "$1" --repository;;
        show) xbps-query -S "$1" --repository;;
        clean) sudo xbps-remove -ROo;;
    esac
}

if has apt; then
    # debian/ubuntu
    _apt "$@"
elif has dnf; then
    # fedora
    _dnf "$@"
elif has pacman-key; then
    # arch/manjaro
    _pacman "$@"
elif has port; then
    # macos
    _macports "$@"
elif has xbps-install; then
    # void
    _xbps "$@"
elif has nix; then
    # nix
    _nix "$@"
elif has brew; then
    pem "Homebrew is not supported [wontfix]"
    exit 1
else
    pem "No valid package manager detected."
    exit 1
fi
